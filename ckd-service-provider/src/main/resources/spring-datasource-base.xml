<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- 配置数据源(主从) -->
    <bean id="abstractDataSourceBase" class="com.alibaba.druid.pool.DruidDataSource" abstract="true" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClass}"/>
        <property name="username" value="${base.jdbc.user}"/>
        <property name="password" value="${base.jdbc.password}"/>
    </bean>

    <bean id="writeDSBase" parent="abstractDataSourceBase">
        <property name="url" value="${base.jdbc.writeUrl}" />
    </bean>

    <bean id="readDSBase" parent="abstractDataSourceBase">
        <property name="url" value="${base.jdbc.readUrl}" />
    </bean>

    <!--简单的一个master和一个slaver 读写分离的数据源 -->
    <bean id="baseRoutingDataSourceProxy"
          class="com.car.core.db.datasource.impl.RoundRobinRWRoutingDataSourceProxy">
        <property name="writeDataSource" ref="writeDSBase"/>
        <property name="readDataSoures">
            <list>
                <ref bean="readDSBase"/>
                <ref bean="readDSBase"/>
            </list>
        </property>
    </bean>
    <bean id="dataSourceBase" class="com.car.core.db.datasource.DataSourceProxy">
        <constructor-arg ref="baseRoutingDataSourceProxy" />
    </bean>

    <!--自定义事务工厂  -->
    <bean id="transactionFactoryBase" class="com.car.core.db.transaction.RWManagedTransactionFactory"></bean>

    <bean id="sqlSessionFactoryBase" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSourceBase"/>
        <property name="transactionFactory" ref="transactionFactoryBase"/>
        <property name="mapperLocations">
            <array>
                <value>classpath*:sqlmap/com/car/repository/base/*.xml</value>
            </array>
        </property>
        <!--<property name="typeAliasesPackage" value="com.car.domain"/>-->
        <property name="configLocation" value="classpath:mybatis-plugin-config.xml" />
    </bean>

    <bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.car.repository.base"/>
        <!-- 3.2.2版本新特性，markerInterface可以起到mappers配置的作用，详细情况需要看Marker接口类 -->
        <property name="markerInterface" value="com.car.repository.IMapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryBase"/>
        <!-- 通用Mapper通过属性注入进行配置，默认不配置时会注册Mapper<T>接口
        <property name="properties">
            <value>
                mappers=tk.mybatis.mapper.common.Mapper
            </value>
        </property>
        -->
    </bean>

    <bean id="sqlSessionBase" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
        <constructor-arg index="0" ref="sqlSessionFactoryBase"/>
    </bean>

    <!--以下部分如果加入了，dubbo就注册不进去了 why why why!!!-->
    <!--<aop:aspectj-autoproxy/>-->

    <!--<aop:config>-->
        <!--<aop:pointcut id="appServiceBase" expression="execution(* com.car.service..*Service*.*(..))"/>-->
        <!--<aop:advisor advice-ref="txAdviceBase" pointcut-ref="appServiceBase"/>-->
    <!--</aop:config>-->

    <!--<tx:advice id="txAdviceBase" transaction-manager="transactionManagerBase">-->
        <!--<tx:attributes>-->
            <!--<tx:method name="select*" read-only="true"/>-->
            <!--<tx:method name="find*" read-only="true"/>-->
            <!--<tx:method name="get*" read-only="true"/>-->
            <!--<tx:method name="*"/>-->
        <!--</tx:attributes>-->
    <!--</tx:advice>-->

    <!--<bean id="transactionManagerBase" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
        <!--<property name="dataSource" ref="dataSourceBase"/>-->
    <!--</bean>-->
</beans>